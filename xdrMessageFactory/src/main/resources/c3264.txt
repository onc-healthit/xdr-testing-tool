<?xml version="1.0" encoding="UTF-8"?>
<ClinicalDocument xmlns="urn:hl7-org:v3" xmlns:sdtc="urn:hl7-org:sdtc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <realmCode code="US"/>
    <typeId root="2.16.840.1.113883.1.3" extension="POCD_HD000040"/>
    <templateId root="2.16.840.1.113883.3.27.1776" assigningAuthorityName="CDA/R2"/>
    <!--templateId root="2.16.840.1.113883.10.20.1" assigningAuthorityName="CCD"/ -->
    <templateId root="2.16.840.1.113883.10.20.3" assigningAuthorityName="HL7/CDT Header"/>
    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.1.1" assigningAuthorityName="IHE/PCC"/>
    <templateId root="2.16.840.1.113883.3.88.11.32.1" assigningAuthorityName="HITSP/C32"/>
    <id root="2.16.840.1.113883.3.72" extension="CCD_AMBv14_DS01"
        assigningAuthorityName="NIST Healthcare Project"/>
    <code code="34133-9" displayName="Summarization of episode note"
        codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
    <title>Patient Summary - Ambulatory</title>
    <effectiveTime value="20100405130945-0500"/>
    <confidentialityCode>
        <originalText>Test Data Only</originalText>
    </confidentialityCode>
    <languageCode code="en-US"/>
    <recordTarget>
        <patientRole>
            <id extension="9996799589" root="METROCLINIC"
                assigningAuthorityName="Metropolitan Clinic"/>
            <addr>
                <streetAddressLine>5739 Hazel Street</streetAddressLine>
                <city>Williamsport</city>
                <state>PA</state>
                <postalCode>17701</postalCode>
            </addr>
            <telecom value="+1-570-898-2189"/>
            <patient>
                <name>
                    <given>James</given>
                    <given>D.</given>
                    <family>Stuart</family>
                </name>
                <administrativeGenderCode code="M" displayName="Male"
                    codeSystem="2.16.840.1.113883.5.1" codeSystemName="HL7 AdministrativeGender"/>
                <birthTime value="19530215112005"/>
                <languageCommunication>
                    <templateId root="2.16.840.1.113883.3.88.11.83.2"
                        assigningAuthorityName="HITSP/C83"/>
                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.1"
                        assigningAuthorityName="IHE/PCC"/>
                    <languageCode code="en-US"/>
                </languageCommunication>
            </patient>
        </patientRole>
    </recordTarget>
    <author>
        <time value="20100217120000"/>
        <assignedAuthor>
            <id root="METROCLINIC" extension="DrFitzgerald"/>
            <addr>
                <streetAddressLine>5544 Sutter Street</streetAddressLine>
                <city>Williamsport</city>
                <state>PA</state>
                <postalCode>17701</postalCode>
            </addr>
            <telecom/>
            <assignedPerson>
                <name>
                    <given>Thomas</given>
                    <family>Henry</family>
                    <suffix>MD</suffix>
                </name>
            </assignedPerson>
            <representedOrganization>
                <name>Metropolitan Clinic</name>
                <telecom/>
                <addr/>
            </representedOrganization>
        </assignedAuthor>
    </author>
    <custodian>
        <assignedCustodian>
            <representedCustodianOrganization>
                <id root="2.16.840.1.113883.3.72"/>
                <name>NIST Healthcare Project</name>
                <telecom value="tel:+1-301-975-3260"/>
                <addr>
                    <streetAddressLine>100 Bureau Dr</streetAddressLine>
                    <city>Gaithersburg</city>
                    <state>MD</state>
                    <postalCode>20899</postalCode>
                </addr>
            </representedCustodianOrganization>
        </assignedCustodian>
    </custodian>
    <participant typeCode="IND">
        <templateId root="2.16.840.1.113883.3.88.11.83.3" assigningAuthorityName="HITSP/C83"/>
        <templateId root="1.3.6.1.4.1.19376.1.5.3.1.2.4" assigningAuthorityName="IHE/PCC"/>
        <time value="19840704"/>

        <associatedEntity classCode="NOK">
            <addr/>
            <telecom value="tel:+1-301-975-3260"/>
            <associatedPerson>
                <name>Spouse</name>
            </associatedPerson>
        </associatedEntity>
    </participant>
    <documentationOf>
        <serviceEvent classCode="PCPR">
            <effectiveTime>
                <low value="19600704"/>
                <high value="20100325"/>
            </effectiveTime>
        </serviceEvent>
    </documentationOf>
    <component>
        <structuredBody>
            <component>
                <!--Active Problems-->
                <section>
                    <templateId root="2.16.840.1.113883.3.88.11.83.103"
                        assigningAuthorityName="HITSP/C83"/>
                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.6"
                        assigningAuthorityName="IHE PCC"/>
                    <templateId root="2.16.840.1.113883.10.20.1.11" assigningAuthorityName="HL7 CCD"/>
                    <!--Problems section template-->
                    <code code="11450-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"
                        displayName="Problem list"/>
                    <title>Problems</title>
                    <text>
                        <table border="1" width="100%">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>ICD-9 Code</th>
                                    <th>SNOMED CT</th>
                                    <th>Problem</th>
                                    <th>Date Diagnosed</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>


                                <tr>
                                    <td>Finding</td>
                                    <td>414.01</td>
                                    <td>53741008</td>
                                    <td ID="CondID-1">Coronary Artery Disease (CAD), Coronary
                                        Arteriosclerosis</td>
                                    <td>05/05/2006</td>
                                    <td>Active</td>
                                </tr>

                                <tr>
                                    <td>Symptom</td>
                                    <td>401.9</td>
                                    <td>59621000</td>
                                    <td ID="CondID-2">Hypertension, Essential</td>
                                    <td>5/5/2006</td>
                                    <td>Active</td>
                                </tr>

                                <tr>
                                    <td>Diagnosis</td>
                                    <td>493.00</td>
                                    <td>195967001</td>
                                    <td ID="CondID-3">Asthma</td>
                                    <td>12/22/2002</td>
                                    <td>Active</td>
                                </tr>

                            </tbody>
                        </table>
                    </text>

                    <entry typeCode="DRIV">
                        <act classCode="ACT" moodCode="EVN">

                            <templateId root="2.16.840.1.113883.3.88.11.83.7"
                                assigningAuthorityName="HITSP/C83 Condition"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2"
                                assigningAuthorityName="IHE Problem Concern"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1"
                                assigningAuthorityName="IHE Problem Concern"/>

                            <templateId root="2.16.840.1.113883.10.20.1.27"/>
                            <!-- Problem act template -->
                            <id/>
                            <code nullFlavor="NA"/>
                            <statusCode code="completed"/>
                            <effectiveTime>
                                <low nullFlavor="NA"/>
                                <high nullFlavor="NA"/>
                            </effectiveTime>
                            <entryRelationship typeCode="SUBJ" inversionInd="false">
                                <observation classCode="OBS" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.10.20.1.28"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5"
                                        assigningAuthorityName="IHE PCC"/>

                                    <!--Problem observation template-->
                                    <id/>
                                    <code code="404684003" displayName="Finding"
                                        codeSystem="2.16.840.1.113883.6.96"
                                        codeSystemName="SNOMED-CT"/>
                                    <text>
                                        <reference value="#CondId-1"> </reference>
                                    </text>
                                    <statusCode code="completed"/>
                                    <effectiveTime>
                                        <low value="20060505"/>
                                    </effectiveTime>

                                    <!--value xsi:type="CD" code="414.01" displayName="Coronary Artery Disease (CAD)" codeSystemName="ICD-9" codeSystem="2.16.840.1.113883.6.42">
										<translation code="53741008" displayName="Coronary Arteriosclerosis" codeSystemName="SNOMED CT" codeSystem="2.16.840.1.113883.6.96"/>
									</value -->

                                    <value xsi:type="CD" code="53741008"
                                        displayName="Coronary Arteriosclerosis"
                                        codeSystemName="SNOMED CT"
                                        codeSystem="2.16.840.1.113883.6.96"/>

                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <templateId root="2.16.840.1.113883.10.20.1.50"/>
                                            <!--Problem status observation template -->
                                            <code displayName="Status" code="33999-4"
                                                codeSystemName="LOINC"
                                                codeSystem="2.16.840.1.113883.6.1"/>
                                            <statusCode code="completed"/>
                                            <value xsi:type="CE" displayName="Chronic"
                                                code="90734009" codeSystemName="SNOMED CT"
                                                codeSystem="2.16.840.1.113883.6.96"/>
                                        </observation>
                                    </entryRelationship>
                                </observation>
                            </entryRelationship>
                        </act>
                    </entry>

                    <entry typeCode="DRIV">
                        <act classCode="ACT" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.3.88.11.83.7"
                                assigningAuthorityName="HITSP/C83 Condition"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.2"
                                assigningAuthorityName="IHE Problem Concern"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1"
                                assigningAuthorityName="IHE Problem Concern"/>
                            <templateId root="2.16.840.1.113883.10.20.1.27"/>
                            <!-- Problem act template -->
                            <id/>
                            <code nullFlavor="NA"/>
                            <statusCode code="completed"/>
                            <effectiveTime>
                                <low nullFlavor="NA"/>
                                <high nullFlavor="NA"/>
                            </effectiveTime>
                            <entryRelationship typeCode="SUBJ" inversionInd="false">
                                <observation classCode="OBS" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.10.20.1.28"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5"
                                        assigningAuthorityName="IHE PCC"/>

                                    <!--Problem observation template-->
                                    <id/>
                                    <code code="418799008" displayName="Symptom"
                                        codeSystem="2.16.840.1.113883.6.96"
                                        codeSystemName="SNOMED-CT"/>
                                    <text>
                                        <reference value="*CondID-2"/>
                                    </text>
                                    <statusCode code="completed"/>

                                    <effectiveTime>
                                        <low value="20060505"/>
                                    </effectiveTime>
                                    <!--value xsi:type="CD" code="401.9" displayName="Hypertension, Essential" codeSystemName="ICD-9" codeSystem="2.16.840.1.113883.6.42">
										<originalText>
											<reference value="#CondID-2"/>
										</originalText>
										<translation code="59621000" displayName="Essential Hypertension" codeSystemName="SNOMED CT" codeSystem="2.16.840.1.113883.6.96"/>
										</value -->

                                    <value xsi:type="CD" code="59621000"
                                        displayName="Essential Hypertension"
                                        codeSystemName="SNOMED CT"
                                        codeSystem="2.16.840.1.113883.6.96">
                                        <originalText>
                                            <reference value="#CondID-2"/>
                                        </originalText>
                                    </value>
                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <templateId root="2.16.840.1.113883.10.20.1.50"/>
                                            <!--Problem status observation template -->
                                            <code displayName="Status" code="33999-4"
                                                codeSystemName="LOINC"
                                                codeSystem="2.16.840.1.113883.6.1"/>
                                            <statusCode code="completed"/>
                                            <value xsi:type="CE" displayName="Active"
                                                code="55561003" codeSystemName="SNOMED CT"
                                                codeSystem="2.16.840.1.113883.6.96"/>
                                        </observation>
                                    </entryRelationship>
                                </observation>
                            </entryRelationship>
                        </act>
                    </entry>

                    <entry typeCode="DRIV">
                        <act classCode="ACT" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.10.20.1.27"/>
                            <!-- Problem act template -->
                            <id/>
                            <code nullFlavor="NA"/>
                            <entryRelationship typeCode="SUBJ">
                                <observation classCode="OBS" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.10.20.1.28"
                                        assigningAuthorityName="CCD"/>
                                    <!--Problem observation template-->
                                    <id/>
                                    <code code="282291009" displayName="Diagnosis"
                                        codeSystem="2.16.840.1.113883.6.96"
                                        codeSystemName="SNOMED-CT"/>
                                    <text>
                                        <reference value="#CondId-3"> </reference>
                                    </text>
                                    <statusCode code="completed"/>
                                    <effectiveTime>
                                        <low value="20021222"/>
                                    </effectiveTime>
                                    <!--value xsi:type="CD" code="493.00" displayName="Asthma, unspecified" codeSystemName="ICD-9" codeSystem="2.16.840.1.113883.6.42">
										<originalText>
											<reference value="#CondID-3"/>
										</originalText>
										<translation code="195967001" displayName="Asthma" codeSystemName="SNOMED CT" codeSystem="2.16.840.1.113883.6.96"/>
										</value-->

                                    <value xsi:type="CD" code="195967001" displayName="Asthma"
                                        codeSystemName="SNOMED CT"
                                        codeSystem="2.16.840.1.113883.6.96">
                                        <originalText>
                                            <reference value="#CondID-3"/>
                                        </originalText>
                                    </value>

                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <templateId root="2.16.840.1.113883.10.20.1.50"/>
                                            <!--Problem status observation template -->
                                            <code displayName="Status" code="33999-4"
                                                codeSystemName="LOINC"
                                                codeSystem="2.16.840.1.113883.6.1"/>
                                            <statusCode code="completed"/>
                                            <value xsi:type="CE" displayName="Active"
                                                code="55561003" codeSystemName="SNOMED CT"
                                                codeSystem="2.16.840.1.113883.6.96"/>
                                        </observation>
                                    </entryRelationship>
                                </observation>
                            </entryRelationship>
                        </act>
                    </entry>

                </section>
            </component>


            <component>
                <!--Medications-->
                <section>
                    <templateId root="2.16.840.1.113883.3.88.11.83.112"
                        assigningAuthorityName="HITSP/C83"/>
                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.19"
                        assigningAuthorityName="IHE PCC"/>
                    <templateId root="2.16.840.1.113883.10.20.1.8" assigningAuthorityName="HL7 CCD"/>

                    <!--Medications section template-->
                    <code code="10160-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"
                        displayName="History of medication use"/>

                    <title>Medications</title>
                    <text>
                        <table border="1" width="100%">
                            <thead>

                                <tr>
                                    <th>RxNorm Code</th>
                                    <th>Medication</th>
                                    <th>Strength</th>
                                    <th>Dose</th>
                                    <th>Route</th>
                                    <th>Frequency</th>
                                    <th>Patient Instructions</th>
                                    <th>Status</th>
                                    <th>Date Started</th>
                                </tr>
                            </thead>
                            <tbody>

                                <tr>
                                    <td>200801</td>
                                    <td>furosemide (Lasix)</td>
                                    <td>20 mg</td>
                                    <td>1 tablet</td>
                                    <td>Oral</td>
                                    <td>BID</td>
                                    <td>
                                        <content ID="PInstruct_01"/>1 tablet by mouth 2 times per
                                        day</td>
                                    <td>Active</td>
                                    <td>5/5/2006</td>
                                </tr>

                                <tr>
                                    <td>628958</td>
                                    <td>potassium chloride (Klor-Con)</td>
                                    <td>10 mEq</td>
                                    <td>1 tablet</td>
                                    <td>Oral</td>
                                    <td>BID</td>
                                    <td>
                                        <content ID="PInstruct_02"/>1 tablet by mouth 2 times per
                                        day</td>
                                    <td>Active</td>
                                    <td>5/5/2006</td>
                                </tr>
                                <tr>
                                    <td>206833</td>
                                    <td>metaproterenol sulfate (Alupent Aerosol)</td>
                                    <td>15 mg/ml</td>
                                    <td>2 puffs</td>
                                    <td>Inhaled</td>
                                    <td>Q4h</td>
                                    <td>
                                        <content ID="PInstruct_03"/>2 puffs inhaled every 4 hours </td>
                                    <td>Active</td>
                                    <td>12/22/2002</td>
                                </tr>


                            </tbody>
                        </table>
                    </text>

                    <entry typeCode="DRIV">
                        <substanceAdministration classCode="SBADM" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.10.20.1.24"
                                assigningAuthorityName="CCD"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"
                                assigningAuthorityName="IHE PCC"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"
                                assigningAuthorityName="IHE PCC"/>
                            <!--Medication activity template -->
                            <id root="cdbd5b01-6cde-11db-9fe1-0800200c9a66"/>
                            <statusCode code="completed"/>
                            <effectiveTime xsi:type="IVL_TS">
                                <low value="20060505"/>
                                <high nullFlavor="UNK"/>
                            </effectiveTime>
                            <effectiveTime xsi:type="PIVL_TS" operator="A"
                                institutionSpecified="false">
                                <period value="12" unit="h"/>
                            </effectiveTime>
                            <!--routeCode code="PO" displayName="Swallow, oral" codeSystemName="HL7 RouteOfAdministration" codeSystem="2.16.840.1.113883.5.112">
								<originalText>By Mouth</originalText>
								<translation code="C38288" displayName="Oral" codeSystemName="FDA RouteOfAdministration" codeSystem="2.16.840.1.113883.3.26.1.1"/>
								</routeCode-->
                            <routeCode code="C38288" displayName="Oral"
                                codeSystemName="FDA RouteOfAdministration"
                                codeSystem="2.16.840.1.113883.3.26.1.1">
                                <originalText>By Mouth</originalText>
                            </routeCode>
                            <doseQuantity value="1" unit="tablet"/>
                            <consumable>
                                <manufacturedProduct>
                                    <templateId root="2.16.840.1.113883.10.20.1.53"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"
                                        assigningAuthorityName="IHE PCC"/>
                                    <!-- Product template -->
                                    <manufacturedMaterial>
                                        <code code="200801"
                                            displayName="Furosemide 20 MG Oral Tablet [Lasix]"
                                            codeSystem="2.16.840.1.113883.6.88"
                                            codeSystemName="RxNorm">
                                            <originalText>
                                                <reference value="furosemide"/>
                                            </originalText>
                                        </code>
                                        <name>Lasix</name>
                                    </manufacturedMaterial>
                                </manufacturedProduct>
                            </consumable>
                            <entryRelationship typeCode="SUBJ" inversionInd="true">
                                <act classCode="ACT" moodCode="INT">
                                    <templateId root="2.16.840.1.113883.10.20.1.49"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.3"
                                        assigningAuthorityName="IHE PCC"/>

                                    <code code="PINSTRUCT" codeSystem="1.3.6.1.4.1.19376.1.5.3.2"
                                        codeSystemName="IHEActCode">
                                        <originalText>
                                            <reference value="#PInstruct_01"/>
                                        </originalText>
                                    </code>
                                    <text>This is the only formal "Free Text comment" in this
                                        document! Note that ALL such comments must appear in the
                                        narrative text of the parent Section and be referenced by
                                        the following pointer to it.<reference
                                            value="PntrtoSectionText"/>
                                    </text>
                                    <statusCode code="completed"/>
                                </act>
                            </entryRelationship>
                        </substanceAdministration>
                    </entry>


                    <entry typeCode="DRIV">
                        <substanceAdministration classCode="SBADM" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.3.88.11.83.8"
                                assigningAuthorityName="HITSP C83"/>
                            <templateId root="2.16.840.1.113883.10.20.1.24"
                                assigningAuthorityName="CCD"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"
                                assigningAuthorityName="IHE PCC"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"
                                assigningAuthorityName="IHE PCC"/>

                            <!--Medication activity template -->
                            <id root="cdbd5b03-6cde-11db-9fe1-0800200c9a66"/>
                            <statusCode code="completed"/>
                            <effectiveTime xsi:type="IVL_TS">
                                <low value="20060505"/>
                            </effectiveTime>
                            <effectiveTime xsi:type="PIVL_TS" operator="A"
                                institutionSpecified="false">
                                <period value="12" unit="h"/>
                            </effectiveTime>
                            <!-- routeCode code="PO" displayName="Swallow, oral" codeSystemName="HL7 RouteOfAdministration" codeSystem="2.16.840.1.113883.5.112">
								<originalText>Oral</originalText>
								<translation code="C38288" displayName="Oral" codeSystemName="FDA RouteOfAdministration" codeSystem="2.16.840.1.113883.3.26.1.1"/>
							</routeCode -->

                            <routeCode code="C38288" displayName="Oral"
                                codeSystemName="FDA RouteOfAdministration"
                                codeSystem="2.16.840.1.113883.3.26.1.1">
                                <originalText>By Mouth</originalText>
                            </routeCode>
                            <doseQuantity value="1" unit="tablet"/>
                            <consumable>
                                <manufacturedProduct>
                                    <templateId root="2.16.840.1.113883.3.88.11.83.8.2"
                                        assigningAuthorityName="HITSP C83"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.53"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"
                                        assigningAuthorityName="IHE PCC"/>
                                    <!-- Product template -->
                                    <manufacturedMaterial>
                                        <code code="628958"
                                            displayName="Potassium Chloride 10 MEQ Extended Release Tablet [Klor-Con]"
                                            codeSystem="2.16.840.1.113883.6.88"
                                            codeSystemName="RxNorm">
                                            <originalText>
                                                <reference value="potassium chloride"/>
                                            </originalText>
                                        </code>
                                        <name>Klor-Con</name>
                                    </manufacturedMaterial>
                                </manufacturedProduct>
                            </consumable>
                            <entryRelationship typeCode="SUBJ" inversionInd="true">
                                <act classCode="ACT" moodCode="INT">
                                    <templateId root="2.16.840.1.113883.10.20.1.49"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.3"
                                        assigningAuthorityName="IHE PCC"/>

                                    <code code="PINSTRUCT" codeSystem="1.3.6.1.4.1.19376.1.5.3.2"
                                        codeSystemName="IHEActCode">
                                        <originalText>
                                            <reference value="#PInstruct_02"/>
                                        </originalText>
                                    </code>
                                    <text>This is the only formal "Free Text comment" in this
                                        document! Note that ALL such comments must appear in the
                                        narrative text of the parent Section and be referenced by
                                        the following pointer to it.<reference
                                            value="PntrtoSectionText"/>
                                    </text>
                                    <statusCode code="completed"/>
                                </act>
                            </entryRelationship>
                        </substanceAdministration>
                    </entry>

                    <entry typeCode="DRIV">
                        <substanceAdministration classCode="SBADM" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.3.88.11.83.8"
                                assigningAuthorityName="HITSP C83"/>
                            <templateId root="2.16.840.1.113883.10.20.1.24"
                                assigningAuthorityName="CCD"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7"
                                assigningAuthorityName="IHE PCC"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.1"
                                assigningAuthorityName="IHE PCC"/>
                            <!--Medication activity template -->
                            <id root="20cf14fb-b65c-4c8c-a54d-b0cca834c18c"/>
                            <statusCode code="completed"/>
                            <effectiveTime xsi:type="IVL_TS">
                                <low value="20021222"/>
                            </effectiveTime>
                            <effectiveTime xsi:type="PIVL_TS" operator="A"
                                institutionSpecified="false">
                                <period value="4" unit="h"/>
                            </effectiveTime>
                            <!--routeCode code="PO" displayName="Swallow, oral" codeSystemName="HL7 RouteOfAdministration" codeSystem="2.16.840.1.113883.5.112">
								<originalText>Puffs</originalText>
								<translation code="C38288" displayName="Oral" codeSystemName="FDA RouteOfAdministration" codeSystem="2.16.840.1.113883.3.26.1.1"/>
							</routeCode -->

                            <routeCode code="C38288" displayName="Oral"
                                codeSystemName="FDA RouteOfAdministration"
                                codeSystem="2.16.840.1.113883.3.26.1.1">
                                <originalText>By Mouth</originalText>
                            </routeCode>
                            <doseQuantity value="2" unit="puffs"/>
                            <consumable>
                                <manufacturedProduct>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.7.2"
                                        assigningAuthorityName="IHE PCC"/>
                                    <templateId root="2.16.840.1.113883.3.88.11.83.8.2"
                                        assigningAuthorityName="HITSP C83"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.53"
                                        assigningAuthorityName="CCD"/>

                                    <!-- Product template -->
                                    <manufacturedMaterial>
                                        <code code="206833"
                                            displayName="metaproterenol sulfate 15 mg/ml Inhalation (Alupent Aerosol)"
                                            codeSystem="2.16.840.1.113883.6.88"
                                            codeSystemName="RxNorm">
                                            <originalText>
                                                <reference value="metaproterenol sulfate"/>
                                            </originalText>
                                        </code>
                                        <name>Alupent Inhalation Aerosol</name>
                                    </manufacturedMaterial>
                                </manufacturedProduct>
                            </consumable>
                            <entryRelationship typeCode="SUBJ" inversionInd="true">
                                <act classCode="ACT" moodCode="INT">
                                    <templateId root="2.16.840.1.113883.10.20.1.49"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.3"
                                        assigningAuthorityName="IHE PCC"/>

                                    <code code="PINSTRUCT" codeSystem="1.3.6.1.4.1.19376.1.5.3.2"
                                        codeSystemName="IHEActCode">
                                        <originalText>
                                            <reference value="#PInstruct_03"/>
                                        </originalText>
                                    </code>
                                    <text>This is the only formal "Free Text comment" in this
                                        document! Note that ALL such comments must appear in the
                                        narrative text of the parent Section and be referenced by
                                        the following pointer to it.<reference
                                            value="PntrtoSectionText"/>
                                    </text>
                                    <statusCode code="completed"/>
                                </act>

                            </entryRelationship>
                        </substanceAdministration>
                    </entry>

                </section>
            </component>

            <component>
                <!--Allergies-->
                <section>
                    <templateId root="2.16.840.1.113883.3.88.11.83.102"
                        assigningAuthorityName="HITSP/C83"/>
                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.13"
                        assigningAuthorityName="IHE PCC"/>
                    <templateId root="2.16.840.1.113883.10.20.1.2" assigningAuthorityName="HL7 CCD"/>
                    <!--Allergies/Reactions section template-->

                    <code code="48765-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"
                        displayName="Allergies"/>
                    <title>Allergies and Adverse Reactions</title>
                    <text>
                        <table border="1" width="100%">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Drug allergy SNOMED code</th>
                                    <th>Substance</th>
                                    <th>Substance RxNorm code</th>
                                    <th>Reaction</th>
                                    <th>Date Identified</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>


                                <tr>
                                    <td>Drug Allergy</td>
                                    <td>293620004</td>
                                    <td>Indomethacin</td>
                                    <td>5781</td>
                                    <td ID="ReactionID-1">Nausea, vomiting, rash, dizziness,
                                        headache </td>
                                    <td>3/25/2004</td>
                                    <td>Active</td>
                                </tr>

                                <tr>
                                    <td>Drug Allergy</td>
                                    <td>293597001</td>
                                    <td>Codeine</td>
                                    <td>2670</td>
                                    <td ID="ReactionID-2">Hives</td>
                                    <td>6/27/2002</td>
                                    <td>Active</td>
                                </tr>

                            </tbody>
                        </table>
                    </text>

                    <entry typeCode="DRIV">
                        <act classCode="ACT" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.10.20.1.27"
                                assigningAuthorityName="CCD"/>
                            <!-- Allergy act template -->
                            <id root="cdbd5b05-6cde-11db-9fe1-0800200c9a66"/>
                            <code nullFlavor="NA"/>
                            <entryRelationship typeCode="SUBJ">
                                <observation classCode="OBS" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.10.20.1.18"/>
                                    <!-- Alert observation template -->
                                    <id/>
                                    <code code="416098002" codeSystem="2.16.840.1.113883.6.96"
                                        displayName="drug allergy" codeSystemName="SNOMED CT"/>
                                    <statusCode code="completed"/>
                                    <effectiveTime>
                                        <low value="20040325"/>
                                    </effectiveTime>
                                    <!--Note that IHE/PCC and HITSP/C32 differ in how to represent the drug, substance, or food that one is allergic to. IHE/PCC expects to see that information in <value> and HITSP/C32 expects to see it in
										<participant>. The following puts the SNOMED allergy code in <value> and the RxNorm drug code in <participant>. -->
                                    <value xsi:type="CD" code="293620004"
                                        displayName="Indomethacin allergy"
                                        codeSystemName="SNOMED CT"
                                        codeSystem="2.16.840.1.113883.6.96"/>
                                    <participant typeCode="CSM">
                                        <participantRole classCode="MANU">
                                            <playingEntity classCode="MMAT">
                                                <code code="5781" displayName="Indomethacin"
                                                  codeSystemName="RxNorm"
                                                  codeSystem="2.16.840.1.113883.6.88"/>
                                                <name>Indomethacin</name>
                                            </playingEntity>
                                        </participantRole>
                                    </participant>
                                    <entryRelationship typeCode="MFST">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <templateId root="2.16.840.1.113883.10.20.1.54"
                                                assigningAuthorityName="CCD"/>
                                            <id/>
                                            <code/>
                                            <statusCode code="completed"/>
                                            <value xsi:type="CD">
                                                <originalText>Diarrhea, nausea, vomiting<reference
                                                  value="#ReactionID-1"/>
                                                </originalText>
                                            </value>
                                        </observation>
                                    </entryRelationship>
                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <templateId root="2.16.840.1.113883.10.20.1.39"/>
                                            <!--Problem status observation template -->
                                            <code displayName="Status" code="33999-4"
                                                codeSystemName="LOINC"
                                                codeSystem="2.16.840.1.113883.6.1"/>
                                            <statusCode code="completed"/>
                                            <value xsi:type="CE" displayName="Active"
                                                code="55561003" codeSystemName="SNOMED CT"
                                                codeSystem="2.16.840.1.113883.6.96"/>
                                        </observation>
                                    </entryRelationship>
                                </observation>
                            </entryRelationship>
                        </act>
                    </entry>

                    <entry typeCode="DRIV">
                        <act classCode="ACT" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.3.88.11.83.6"
                                assigningAuthorityName="HITSP C83"/>
                            <templateId root="2.16.840.1.113883.10.20.1.27"
                                assigningAuthorityName="CCD"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.1"
                                assigningAuthorityName="IHE PCC"/>
                            <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5.3"
                                assigningAuthorityName="IHE PCC"/>
                            <!--Allergy act template -->


                            <id root="cdbd5b03-6cde-11db-9fe1-0800200c9a66"/>
                            <code nullFlavor="NA"/>
                            <statusCode code="completed"/>
                            <effectiveTime>
                                <low nullFlavor="UNK"/>
                                <high nullFlavor="UNK"/>
                            </effectiveTime>
                            <entryRelationship typeCode="SUBJ" inversionInd="false">
                                <observation classCode="OBS" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.10.20.1.18"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.28"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.5"
                                        assigningAuthorityName="IHE PCC"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.6"
                                        assigningAuthorityName="IHE PCC"/>

                                    <!--Alert observation template -->
                                    <id/>
                                    <code code="416098002" displayName="drug allergy"
                                        codeSystem="2.16.840.1.113883.6.96"
                                        codeSystemName="SNOMED CT"/>
                                    <statusCode code="completed"/>
                                    <effectiveTime>
                                        <low value="20020627"/>
                                    </effectiveTime>
                                    <!--Note that IHE/PCC and HITSP/C32 differ in how to represent the drug, substance, or food that one is allergic to. IHE/PCC expects to see that information in <value> and HITSP/C32 expects to see it in <participant>. The following putsthe SNOMED allergy code in <value> and the RxNorm drug code in <participant>. -->
                                    <value xsi:type="CD" code="293597001"
                                        displayName="Codeine allergy" codeSystemName="SNOMED CT"
                                        codeSystem="2.16.840.1.113883.6.96"/>
                                    <participant typeCode="CSM">
                                        <participantRole classCode="MANU">
                                            <playingEntity classCode="MMAT">
                                                <code code="2670" displayName="Codeine"
                                                  codeSystemName="RxNorm"
                                                  codeSystem="2.16.840.1.113883.6.88">
                                                  <originalText>
                                                  <reference value="PointrToSectionText"/>
                                                  </originalText>
                                                </code>
                                                <name>Codeine</name>
                                            </playingEntity>
                                        </participantRole>
                                    </participant>
                                    <entryRelationship typeCode="MFST">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <templateId root="2.16.840.1.113883.10.20.1.54"
                                                assigningAuthorityName="CCD"/>
                                            <id/>
                                            <code/>
                                            <statusCode code="completed"/>

                                            <value xsi:type="CD" code="247472004"
                                                codeSystemName="SNOMED CT"
                                                codeSystem="2.16.840.1.113883.6.96">
                                                <originalText>Hives<reference value="#ReactionID-2"
                                                  />
                                                </originalText>
                                            </value>
                                        </observation>
                                    </entryRelationship>
                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <templateId root="2.16.840.1.113883.10.20.1.39"/>
                                            <!--Problem status observation template -->
                                            <code displayName="Status" code="33999-4"
                                                codeSystemName="LOINC"
                                                codeSystem="2.16.840.1.113883.6.1"/>
                                            <statusCode code="completed"/>
                                            <value xsi:type="CE" displayName="Active"
                                                code="55561003" codeSystemName="SNOMED CT"
                                                codeSystem="2.16.840.1.113883.6.96"/>
                                        </observation>
                                    </entryRelationship>
                                </observation>
                            </entryRelationship>
                        </act>
                    </entry>
                </section>
            </component>

            <component>
                <!--Test Results-->
                <section>
                    <templateId root="2.16.840.1.113883.10.20.1.14" assigningAuthorityName="HL7 CCD"/>
                    <templateId root="2.16.840.1.113883.3.88.11.83.122"
                        assigningAuthorityName="HITSP/C83"/>
                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.3.28"
                        assigningAuthorityName="IHE PCC"/>

                    <!--Diagnostic Results section template-->
                    <code code="30954-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"
                        displayName="Results"/>
                    <title>Test Results</title>
                    <text>
                        <paragraph>Lab Results</paragraph>
                        <table border="1" width="100%">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>LOINC Code</th>
                                    <th>Lab Test</th>
                                    <th>Normal Range</th>
                                    <th>Result</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>

                                <tr>
                                    <td>Chemistry</td>
                                    <td>2823-3</td>
                                    <td>Potassium</td>
                                    <td>3.5 - 5.3 mg/dl</td>
                                    <td>4.3</td>
                                    <td>9/16/2009</td>
                                </tr>
                                <tr>
                                    <td>Chemistry</td>
                                    <td>14647-2</td>
                                    <td>Total cholesterol</td>
                                    <td> &lt; 200 mg/dl</td>
                                    <td>162</td>
                                    <td>9/16/2009</td>
                                </tr>
                            </tbody>
                        </table>
                        <br/>
                        <paragraph>Diagnostic Results</paragraph>
                        <table border="1" width="100%">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>LOINC Code</th>
                                    <th>CPT-4 Code</th>
                                    <th>Test</th>
                                    <th>Result</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>

                                <tr>
                                    <td>Imaging</td>
                                    <td>24648-8</td>
                                    <td>71010</td>
                                    <td>Chest X-ray, PA</td>
                                    <td>
                                        <content ID="ResultID_01"/>Increased bronchial wall
                                        markings, patchy infiltrates</td>
                                    <td>2/16/2010</td>
                                </tr>


                            </tbody>
                        </table>
                    </text>
                    <!--HITSP/C83 requires Diagnostic Results to have both Procedure and Results, but gives no guidance as to how they should be related together. If Result requires a specimen, the Procedure to obtain the specimen could be under the specimen. This example simply groups a Procedure with the Results obtained from that Procedure. This is probably not the best way to do it, but satisfies the requirements of both IHE/PCC and HITSP/C83 for Diagnostic Results. -->

                    <entry typeCode="DRIV">
                        <organizer classCode="BATTERY" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.10.20.1.32"/>
                            <id root="7d5a02b0-67a4-11db-bd13-0800200c9a67"/>
                            <code>
                                <originalText>Diagnostic Results</originalText>
                            </code>
                            <!--Result organizer template -->
                            <statusCode code="completed"/>

                            <component>
                                <procedure classCode="PROC" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.3.88.11.83.17"
                                        assigningAuthorityName="HITSP C83"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.29"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19"
                                        assigningAuthorityName="IHE PCC"/>
                                    <id/>
                                    <code code="24648-8" displayName="Chest X-ray, PA"
                                        codeSystemName="LOINC" codeSystem="2.16.840.1.113883.6.1">
                                        <originalText>Chest X-ray PA<reference
                                                value="Procudure for X-ray"/>
                                        </originalText>
                                    </code>
                                    <text>Chest X-ray PA. Note that IHE rules require description
                                        and reference to go here rather than in originalText of
                                            code.<reference value="Ptr to text  in parent Section"/>
                                    </text>
                                    <statusCode code="completed"/>
                                    <effectiveTime value="20100216"/>
                                    <performer>
                                        <assignedEntity>
                                            <id extension="PseudoMD-1"
                                                root="2.16.840.1.113883.3.72.5.2"/>
                                            <addr>See documentationOf in Header</addr>
                                            <telecom/>
                                        </assignedEntity>
                                    </performer>
                                </procedure>
                            </component>

                            <component>
                                <observation classCode="OBS" moodCode="EVN">

                                    <templateId root="2.16.840.1.113883.3.88.11.83.15"
                                        assigningAuthorityName="HITSP C83"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.31"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13"
                                        assigningAuthorityName="IHE PCC"/>
                                    <!--Result observation template -->
                                    <id/>
                                    <code code="24648-8" displayName="Chest X-ray, PA"
                                        codeSystemName="LOINC" codeSystem="2.16.840.1.113883.6.1">
                                        <originalText>Chest X-ray, PA</originalText>
                                        <translation code="71010" displayName="Chest X-ray, PA"
                                            codeSystemName="CPT-4"
                                            codeSystem="2.16.840.1.113883.6.12"/>
                                    </code>
                                    <text>
                                        <reference value="Chest X-ray"/>
                                    </text>
                                    <statusCode code="completed"/>
                                    <effectiveTime value="20100216"/>
                                    <value xsi:type="CD">
                                        <originalText>
                                            <reference
                                                value="Increased bronchial wall markings, patchy infiltrates"
                                            />
                                        </originalText>
                                    </value>
                                    <!--A CCR "Type" observation has no equivalent explicit representation in CCD, so we follow the CCD specification for a general "Status" observation and represent "Type" as follows; type could also be derivable from the above CPT or ICD-9 <code> or identified in a parent <organizer> element.-->
                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <code>
                                                <originalText>Type</originalText>
                                            </code>
                                            <value xsi:type="CD">
                                                <originalText>Imaging</originalText>
                                            </value>
                                        </observation>
                                    </entryRelationship>
                                </observation>
                            </component>
                        </organizer>
                    </entry>


                    <entry typeCode="DRIV">
                        <organizer classCode="BATTERY" moodCode="EVN">
                            <templateId root="2.16.840.1.113883.10.20.1.32"/>
                            <!--Result organizer template -->
                            <id root="7d5a02b0-67a4-11db-bd13-0800200c9a66"/>
                            <code>
                                <originalText>Lab Results</originalText>
                            </code>
                            <statusCode code="completed"/>

                            <component>
                                <procedure classCode="PROC" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.3.88.11.83.17"
                                        assigningAuthorityName="HITSP C83"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.29"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.19"
                                        assigningAuthorityName="IHE PCC"/>
                                    <id/>
                                    <code code="12814-0" codeSystem="2.16.840.1.113883.6.1"
                                        displayName="Chemistry Studies">
                                        <originalText>Chemistry<reference
                                                value="Procudures listed here"/>
                                        </originalText>
                                    </code>
                                    <text>Extract blood for Potassium and Total cholesterol test.
                                        Note that IHE rules require description and reference to go
                                        here rather than in originalText of code.<reference
                                            value="Ptr to text  in parent Section"/>
                                    </text>
                                    <statusCode code="completed"/>
                                    <effectiveTime value="20090916"/>
                                    <performer>
                                        <assignedEntity>
                                            <id extension="PseudoMD-1"
                                                root="2.16.840.1.113883.3.72.5.2"/>
                                            <addr>See documentationOf in Header</addr>
                                            <telecom/>
                                        </assignedEntity>
                                    </performer>
                                </procedure>
                            </component>

                            <component>
                                <observation classCode="OBS" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.3.88.11.83.15"
                                        assigningAuthorityName="HITSP C83"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.31"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13"
                                        assigningAuthorityName="IHE PCC"/>

                                    <!-- Result observation template -->
                                    <id/>
                                    <code code="2823-3" displayName="Potassium"
                                        codeSystemName="LOINC" codeSystem="2.16.840.1.113883.6.1"/>
                                    <text>
                                        <reference value="Potassium"/>
                                    </text>
                                    <statusCode code="completed"/>
                                    <effectiveTime value="20090916"/>
                                    <value xsi:type="PQ" value="4.3" unit="mg/dl"/>
                                    <interpretationCode code="N" displayName="normal"
                                        codeSystemName="HL7 InterpretationRange"
                                        codeSystem="2.16.840.1.113883.5.83"/>
                                    <!--A CCR "Type" observation has no equivalent explicit representation in CCD, so we follow the CCD specification for a general "Status" observation and represent "Type" as follows; type could also be derivable from the above CPT or ICD-9 <code> or identified in a parent <organizer> element.-->
                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <code>
                                                <originalText>Type</originalText>
                                            </code>
                                            <value xsi:type="CD">
                                                <originalText>Chemistry</originalText>
                                            </value>

                                        </observation>
                                    </entryRelationship>
                                    <referenceRange>
                                        <observationRange>
                                            <value xsi:type="IVL_PQ">
                                                <low value="3.5" unit="mg/dl" inclusive="true"/>
                                                <high value="5.3" unit="mg/dl" inclusive="true"/>
                                            </value>
                                        </observationRange>
                                    </referenceRange>
                                </observation>
                            </component>
                            <component>
                                <observation classCode="OBS" moodCode="EVN">
                                    <templateId root="2.16.840.1.113883.3.88.11.83.15"
                                        assigningAuthorityName="HITSP C83"/>
                                    <templateId root="2.16.840.1.113883.10.20.1.31"
                                        assigningAuthorityName="CCD"/>
                                    <templateId root="1.3.6.1.4.1.19376.1.5.3.1.4.13"
                                        assigningAuthorityName="IHE PCC"/>
                                    <!-- Result observation template -->

                                    <id/>
                                    <code code="14647-2" displayName="Total cholesterol"
                                        codeSystemName="LOINC" codeSystem="2.16.840.1.113883.6.1"/>
                                    <text>
                                        <reference value="Total Cholesterol"/>
                                    </text>
                                    <statusCode code="completed"/>
                                    <effectiveTime value="20090916"/>
                                    <value xsi:type="PQ" value="162" unit="mg/dl"/>
                                    <interpretationCode code="N" displayName="normal"
                                        codeSystemName="HL7 InterpretationRange"
                                        codeSystem="2.16.840.1.113883.5.83"/>
                                    <!--A CCR "Type" observation has no equivalent explicit representation in CCD, so we follow the CCD specification for a general "Status" observation and represent "Type" as follows; type could also be derivable from the above CPT or ICD-9 <code> or identified in a parent <organizer> element.-->
                                    <entryRelationship typeCode="REFR">
                                        <observation classCode="OBS" moodCode="EVN">
                                            <code>
                                                <originalText>Type</originalText>
                                            </code>
                                            <value xsi:type="CD">
                                                <originalText>Chemistry</originalText>
                                            </value>
                                        </observation>
                                    </entryRelationship>
                                    <referenceRange>
                                        <observationRange>
                                            <value xsi:type="IVL_PQ">
                                                <high value="200" unit="mg/dl" inclusive="false"/>
                                            </value>
                                        </observationRange>
                                    </referenceRange>
                                </observation>
                            </component>

                        </organizer>
                    </entry>

                </section>
            </component>
        </structuredBody>
    </component>
</ClinicalDocument>
